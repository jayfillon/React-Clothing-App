{"ast":null,"code":"import _objectSpread from \"/Users/jayfillon/Documents/React/crwn-clothing/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; //When you clone a GitHub repo, if this message isn't here.\n//Then we're not connecting to the database of our own but the courses.\n\nconst config = {\n  apiKey: \"AIzaSyCdn9A49Olr8wy6_Vdk2wFo-bgvQu5EKFA\",\n  authDomain: \"crwn-db-8c20c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-8c20c.firebaseio.com\",\n  projectId: \"crwn-db-8c20c\",\n  storageBucket: \"crwn-db-8c20c.appspot.com\",\n  messagingSenderId: \"507696099569\",\n  appId: \"1:507696099569:web:753b3872e89a024fe83950\",\n  measurementId: \"G-W41XF8WLZ9\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //If there is no user, don't exec anymore code\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.id}`);\n  const snapShot = await userRef.get(); //Creates a snapshot\n  //Simpler terms, creates the document/data\n\n  if (!snapShot.exists) {\n    //Destructures userAuth for it's data\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"Error creating a User\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config); //Authentication provided by Firebase\n\nexport const auth = firebase.auth(); //Database provided by Firebase\n\nexport const firestore = firebase.firestore(); //Authentication through Google.\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/jayfillon/Documents/React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","id","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E;AACA,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,EAAG,EAAnC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAL2E,CAO3E;AACA;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB;AADoB,UAEZC,WAFY,GAEWT,QAFX,CAEZS,WAFY;AAAA,UAECC,KAFD,GAEWV,QAFX,CAECU,KAFD;AAGpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDV,cAJC,EAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CA3BM;AA6BPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB,E,CAEA;;AACA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb,C,CACP;;AACA,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\n//When you clone a GitHub repo, if this message isn't here.\n//Then we're not connecting to the database of our own but the courses.\nconst config = {\n  apiKey: \"AIzaSyCdn9A49Olr8wy6_Vdk2wFo-bgvQu5EKFA\",\n  authDomain: \"crwn-db-8c20c.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-8c20c.firebaseio.com\",\n  projectId: \"crwn-db-8c20c\",\n  storageBucket: \"crwn-db-8c20c.appspot.com\",\n  messagingSenderId: \"507696099569\",\n  appId: \"1:507696099569:web:753b3872e89a024fe83950\",\n  measurementId: \"G-W41XF8WLZ9\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //If there is no user, don't exec anymore code\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.id}`);\n  const snapShot = await userRef.get();\n\n  //Creates a snapshot\n  //Simpler terms, creates the document/data\n  if (!snapShot.exists) {\n    //Destructures userAuth for it's data\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating a User\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nfirebase.initializeApp(config);\n\n//Authentication provided by Firebase\nexport const auth = firebase.auth();\n//Database provided by Firebase\nexport const firestore = firebase.firestore();\n\n//Authentication through Google.\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}